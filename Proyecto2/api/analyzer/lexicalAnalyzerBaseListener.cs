//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from lexicalAnalyzer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IlexicalAnalyzerListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class lexicalAnalyzerBaseListener : IlexicalAnalyzerListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.init"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInit([NotNull] lexicalAnalyzerParser.InitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.init"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInit([NotNull] lexicalAnalyzerParser.InitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInstruction([NotNull] lexicalAnalyzerParser.InstructionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInstruction([NotNull] lexicalAnalyzerParser.InstructionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStmt([NotNull] lexicalAnalyzerParser.BlockStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStmt([NotNull] lexicalAnalyzerParser.BlockStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FuncStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.funcInstructions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncStmt([NotNull] lexicalAnalyzerParser.FuncStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FuncStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.funcInstructions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncStmt([NotNull] lexicalAnalyzerParser.FuncStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.funcParams"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncParams([NotNull] lexicalAnalyzerParser.FuncParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.funcParams"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncParams([NotNull] lexicalAnalyzerParser.FuncParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunc([NotNull] lexicalAnalyzerParser.FuncContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunc([NotNull] lexicalAnalyzerParser.FuncContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.pars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPars([NotNull] lexicalAnalyzerParser.ParsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.pars"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPars([NotNull] lexicalAnalyzerParser.ParsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtSlices</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtSlice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtSlices([NotNull] lexicalAnalyzerParser.StmtSlicesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtSlices</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtSlice"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtSlices([NotNull] lexicalAnalyzerParser.StmtSlicesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtVariables"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtVar([NotNull] lexicalAnalyzerParser.StmtVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtVariables"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtVar([NotNull] lexicalAnalyzerParser.StmtVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtVarAssign</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtAssign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtVarAssign([NotNull] lexicalAnalyzerParser.StmtVarAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtVarAssign</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtAssign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtVarAssign([NotNull] lexicalAnalyzerParser.StmtVarAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PrintVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintVar([NotNull] lexicalAnalyzerParser.PrintVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PrintVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintVar([NotNull] lexicalAnalyzerParser.PrintVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.instructionIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] lexicalAnalyzerParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.instructionIf"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] lexicalAnalyzerParser.IfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.forInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStmt([NotNull] lexicalAnalyzerParser.ForStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.forInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStmt([NotNull] lexicalAnalyzerParser.ForStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.forDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForDeclare([NotNull] lexicalAnalyzerParser.ForDeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.forDeclare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForDeclare([NotNull] lexicalAnalyzerParser.ForDeclareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.switchInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStmt([NotNull] lexicalAnalyzerParser.SwitchStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.switchInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStmt([NotNull] lexicalAnalyzerParser.SwitchStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.cases"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCases([NotNull] lexicalAnalyzerParser.CasesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.cases"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCases([NotNull] lexicalAnalyzerParser.CasesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>breakTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.breakInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakTransfer([NotNull] lexicalAnalyzerParser.BreakTransferContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>breakTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.breakInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakTransfer([NotNull] lexicalAnalyzerParser.BreakTransferContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>continueTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.continueInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueTransfer([NotNull] lexicalAnalyzerParser.ContinueTransferContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>continueTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.continueInstruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueTransfer([NotNull] lexicalAnalyzerParser.ContinueTransferContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.returnFunc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStmt([NotNull] lexicalAnalyzerParser.ReturnStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.returnFunc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStmt([NotNull] lexicalAnalyzerParser.ReturnStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtExpr</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtExpr([NotNull] lexicalAnalyzerParser.StmtExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtExpr</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtExpr([NotNull] lexicalAnalyzerParser.StmtExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] lexicalAnalyzerParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] lexicalAnalyzerParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalOperator([NotNull] lexicalAnalyzerParser.RelationalOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalOperator([NotNull] lexicalAnalyzerParser.RelationalOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Null</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNull([NotNull] lexicalAnalyzerParser.NullContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Null</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNull([NotNull] lexicalAnalyzerParser.NullContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Character</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharacter([NotNull] lexicalAnalyzerParser.CharacterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Character</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharacter([NotNull] lexicalAnalyzerParser.CharacterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeOf</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeOf([NotNull] lexicalAnalyzerParser.TypeOfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeOf</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeOf([NotNull] lexicalAnalyzerParser.TypeOfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulDiv([NotNull] lexicalAnalyzerParser.MulDivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulDiv([NotNull] lexicalAnalyzerParser.MulDivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSub([NotNull] lexicalAnalyzerParser.AddSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSub([NotNull] lexicalAnalyzerParser.AddSubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParens([NotNull] lexicalAnalyzerParser.ParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParens([NotNull] lexicalAnalyzerParser.ParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConvertInt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConvertInt([NotNull] lexicalAnalyzerParser.ConvertIntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConvertInt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConvertInt([NotNull] lexicalAnalyzerParser.ConvertIntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicOperator([NotNull] lexicalAnalyzerParser.LogicOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicOperator([NotNull] lexicalAnalyzerParser.LogicOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] lexicalAnalyzerParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] lexicalAnalyzerParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] lexicalAnalyzerParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] lexicalAnalyzerParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] lexicalAnalyzerParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] lexicalAnalyzerParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Decimal</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecimal([NotNull] lexicalAnalyzerParser.DecimalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Decimal</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecimal([NotNull] lexicalAnalyzerParser.DecimalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegateOperator([NotNull] lexicalAnalyzerParser.NegateOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegateOperator([NotNull] lexicalAnalyzerParser.NegateOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConvertFloat</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConvertFloat([NotNull] lexicalAnalyzerParser.ConvertFloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConvertFloat</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConvertFloat([NotNull] lexicalAnalyzerParser.ConvertFloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssingVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssingVar([NotNull] lexicalAnalyzerParser.AssingVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssingVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssingVar([NotNull] lexicalAnalyzerParser.AssingVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegate([NotNull] lexicalAnalyzerParser.NegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegate([NotNull] lexicalAnalyzerParser.NegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCall</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] lexicalAnalyzerParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCall</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] lexicalAnalyzerParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean([NotNull] lexicalAnalyzerParser.BooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean([NotNull] lexicalAnalyzerParser.BooleanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Module</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModule([NotNull] lexicalAnalyzerParser.ModuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Module</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModule([NotNull] lexicalAnalyzerParser.ModuleContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
