//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from lexicalAnalyzer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class lexicalAnalyzerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, LINE_COMMENT=50, MULTILINE_COMMENT=51, 
		NEWLINE=52, NULL=53, BOOL=54, ID=55, INT=56, DECIMAL=57, CHARACTER=58, 
		STRING=59;
	public const int
		RULE_init = 0, RULE_lstinstructions = 1, RULE_instruction = 2, RULE_funcInstructions = 3, 
		RULE_funcParams = 4, RULE_func = 5, RULE_pars = 6, RULE_stmtSlice = 7, 
		RULE_stmtVariables = 8, RULE_stmtAssign = 9, RULE_print = 10, RULE_instructionIf = 11, 
		RULE_forInstruction = 12, RULE_forDeclare = 13, RULE_switchInstruction = 14, 
		RULE_cases = 15, RULE_breakInstruction = 16, RULE_continueInstruction = 17, 
		RULE_returnFunc = 18, RULE_expression = 19, RULE_type = 20, RULE_expr = 21;
	public static readonly string[] ruleNames = {
		"init", "lstinstructions", "instruction", "funcInstructions", "funcParams", 
		"func", "pars", "stmtSlice", "stmtVariables", "stmtAssign", "print", "instructionIf", 
		"forInstruction", "forDeclare", "switchInstruction", "cases", "breakInstruction", 
		"continueInstruction", "returnFunc", "expression", "type", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'func'", "'('", "')'", "':'", "'{'", "'}'", "','", "'var'", 
		"'[]'", "'='", "':='", "'fmt.Println'", "'if'", "'else if'", "'else'", 
		"'for'", "'switch'", "'default'", "'case'", "'break'", "'continue'", "'return'", 
		"'int'", "'float64'", "'string'", "'bool'", "'rune'", "'-'", "'*'", "'/'", 
		"'+'", "'%'", "'!'", "'strconv.Atoi'", "'strconv.ParseFloat'", "'reflect.TypeOf'", 
		"'=='", "'!='", "'>='", "'>'", "'<='", "'<'", "'&&'", "'||'", "'++'", 
		"'--'", "'+='", "'-='", null, null, null, "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "LINE_COMMENT", "MULTILINE_COMMENT", "NEWLINE", "NULL", "BOOL", 
		"ID", "INT", "DECIMAL", "CHARACTER", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lexicalAnalyzer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static lexicalAnalyzerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public lexicalAnalyzerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public lexicalAnalyzerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext lstinstructions() {
			return GetRuleContext<LstinstructionsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			lstinstructions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LstinstructionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public LstinstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lstinstructions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterLstinstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitLstinstructions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLstinstructions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LstinstructionsContext lstinstructions() {
		LstinstructionsContext _localctx = new LstinstructionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_lstinstructions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			instruction();
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1143914563602113036L) != 0)) {
				{
				{
				State = 47;
				instruction();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtVariablesContext stmtVariables() {
			return GetRuleContext<StmtVariablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtAssignContext stmtAssign() {
			return GetRuleContext<StmtAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncInstructionsContext funcInstructions() {
			return GetRuleContext<FuncInstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionIfContext instructionIf() {
			return GetRuleContext<InstructionIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtSliceContext stmtSlice() {
			return GetRuleContext<StmtSliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInstructionContext forInstruction() {
			return GetRuleContext<ForInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchInstructionContext switchInstruction() {
			return GetRuleContext<SwitchInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakInstructionContext breakInstruction() {
			return GetRuleContext<BreakInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueInstructionContext continueInstruction() {
			return GetRuleContext<ContinueInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnFuncContext returnFunc() {
			return GetRuleContext<ReturnFuncContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruction);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				expression();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 54;
					Match(T__0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				stmtVariables();
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 58;
					Match(T__0);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				stmtAssign();
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 62;
					Match(T__0);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65;
				funcInstructions();
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 66;
					Match(T__0);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				print();
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 70;
					Match(T__0);
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 73;
				instructionIf();
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 74;
					Match(T__0);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 77;
				stmtSlice();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 78;
					Match(T__0);
					}
				}

				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 81;
				forInstruction();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 82;
					Match(T__0);
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 85;
				switchInstruction();
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 86;
					Match(T__0);
					}
				}

				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 89;
				breakInstruction();
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 90;
					Match(T__0);
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 93;
				continueInstruction();
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 94;
					Match(T__0);
					}
				}

				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 97;
				returnFunc();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 98;
					Match(T__0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInstructionsContext : ParserRuleContext {
		public FuncInstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInstructions; } }
	 
		public FuncInstructionsContext() { }
		public virtual void CopyFrom(FuncInstructionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncStmtContext : FuncInstructionsContext {
		public TypeContext returnT;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(lexicalAnalyzerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext lstinstructions() {
			return GetRuleContext<LstinstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParamsContext funcParams() {
			return GetRuleContext<FuncParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncStmtContext(FuncInstructionsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterFuncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitFuncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncInstructionsContext funcInstructions() {
		FuncInstructionsContext _localctx = new FuncInstructionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcInstructions);
		int _la;
		try {
			_localctx = new FuncStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__1);
			State = 104;
			Match(ID);
			State = 105;
			Match(T__2);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 106;
				funcParams();
				}
			}

			State = 109;
			Match(T__3);
			State = 110;
			Match(T__4);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 520093696L) != 0)) {
				{
				State = 111;
				((FuncStmtContext)_localctx).returnT = type();
				}
			}

			State = 114;
			Match(T__5);
			State = 115;
			lstinstructions();
			State = 116;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(lexicalAnalyzerParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(lexicalAnalyzerParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterFuncParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitFuncParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(ID);
			State = 119;
			type();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 120;
				Match(T__7);
				State = 121;
				Match(ID);
				State = 122;
				type();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParsContext pars() {
			return GetRuleContext<ParsContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 10, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__2);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1143914563587014664L) != 0)) {
				{
				State = 129;
				pars();
				}
			}

			State = 132;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitPars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParsContext pars() {
		ParsContext _localctx = new ParsContext(Context, State);
		EnterRule(_localctx, 12, RULE_pars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			expr(0);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 135;
				Match(T__7);
				State = 136;
				expr(0);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtSliceContext : ParserRuleContext {
		public StmtSliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtSlice; } }
	 
		public StmtSliceContext() { }
		public virtual void CopyFrom(StmtSliceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtSlicesContext : StmtSliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(lexicalAnalyzerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StmtSlicesContext(StmtSliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterStmtSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitStmtSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtSliceContext stmtSlice() {
		StmtSliceContext _localctx = new StmtSliceContext(Context, State);
		EnterRule(_localctx, 14, RULE_stmtSlice);
		int _la;
		try {
			_localctx = new StmtSlicesContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__8);
			State = 143;
			Match(ID);
			State = 144;
			Match(T__9);
			State = 145;
			type();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 146;
				Match(T__10);
				State = 147;
				Match(T__5);
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1143914563587014920L) != 0)) {
					{
					State = 150;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__2:
					case T__28:
					case T__33:
					case T__34:
					case T__35:
					case T__36:
					case NULL:
					case BOOL:
					case ID:
					case INT:
					case DECIMAL:
					case CHARACTER:
					case STRING:
						{
						State = 148;
						expr(0);
						}
						break;
					case T__7:
						{
						State = 149;
						Match(T__7);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 155;
				Match(T__6);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtVariablesContext : ParserRuleContext {
		public StmtVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtVariables; } }
	 
		public StmtVariablesContext() { }
		public virtual void CopyFrom(StmtVariablesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtVarContext : StmtVariablesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(lexicalAnalyzerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtVarContext(StmtVariablesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterStmtVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitStmtVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtVariablesContext stmtVariables() {
		StmtVariablesContext _localctx = new StmtVariablesContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmtVariables);
		int _la;
		try {
			_localctx = new StmtVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__8);
			State = 159;
			Match(ID);
			State = 160;
			type();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 161;
				Match(T__10);
				State = 162;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAssignContext : ParserRuleContext {
		public StmtAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtAssign; } }
	 
		public StmtAssignContext() { }
		public virtual void CopyFrom(StmtAssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtVarAssignContext : StmtAssignContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(lexicalAnalyzerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtVarAssignContext(StmtAssignContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterStmtVarAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitStmtVarAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtVarAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAssignContext stmtAssign() {
		StmtAssignContext _localctx = new StmtAssignContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmtAssign);
		try {
			_localctx = new StmtVarAssignContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(ID);
			State = 166;
			Match(T__11);
			State = 167;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
	 
		public PrintContext() { }
		public virtual void CopyFrom(PrintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintVarContext : PrintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PrintVarContext(PrintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterPrintVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitPrintVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 20, RULE_print);
		int _la;
		try {
			_localctx = new PrintVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__12);
			State = 170;
			Match(T__2);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 173;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case T__28:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case NULL:
				case BOOL:
				case ID:
				case INT:
				case DECIMAL:
				case CHARACTER:
				case STRING:
					{
					State = 171;
					expr(0);
					}
					break;
				case T__7:
					{
					State = 172;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1143914563587014920L) != 0) );
			State = 177;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionIfContext : ParserRuleContext {
		public InstructionIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionIf; } }
	 
		public InstructionIfContext() { }
		public virtual void CopyFrom(InstructionIfContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmtContext : InstructionIfContext {
		public ExprContext exprIf;
		public LstinstructionsContext lsIf;
		public ExprContext exprElseIf;
		public LstinstructionsContext lsElseIf;
		public LstinstructionsContext lsElse;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext[] lstinstructions() {
			return GetRuleContexts<LstinstructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext lstinstructions(int i) {
			return GetRuleContext<LstinstructionsContext>(i);
		}
		public IfStmtContext(InstructionIfContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionIfContext instructionIf() {
		InstructionIfContext _localctx = new InstructionIfContext(Context, State);
		EnterRule(_localctx, 22, RULE_instructionIf);
		int _la;
		try {
			_localctx = new IfStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__13);
			State = 180;
			((IfStmtContext)_localctx).exprIf = expr(0);
			State = 181;
			Match(T__5);
			State = 182;
			((IfStmtContext)_localctx).lsIf = lstinstructions();
			State = 183;
			Match(T__6);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				{
				State = 184;
				Match(T__14);
				State = 185;
				((IfStmtContext)_localctx).exprElseIf = expr(0);
				State = 186;
				Match(T__5);
				State = 187;
				((IfStmtContext)_localctx).lsElseIf = lstinstructions();
				State = 188;
				Match(T__6);
				}
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 195;
				Match(T__15);
				State = 196;
				Match(T__5);
				State = 197;
				((IfStmtContext)_localctx).lsElse = lstinstructions();
				State = 198;
				Match(T__6);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInstructionContext : ParserRuleContext {
		public ForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInstruction; } }
	 
		public ForInstructionContext() { }
		public virtual void CopyFrom(ForInstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForStmtContext : ForInstructionContext {
		public LstinstructionsContext lsfor;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext lstinstructions() {
			return GetRuleContext<LstinstructionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtAssignContext stmtAssign() {
			return GetRuleContext<StmtAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForDeclareContext forDeclare() {
			return GetRuleContext<ForDeclareContext>(0);
		}
		public ForStmtContext(ForInstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInstructionContext forInstruction() {
		ForInstructionContext _localctx = new ForInstructionContext(Context, State);
		EnterRule(_localctx, 24, RULE_forInstruction);
		int _la;
		try {
			_localctx = new ForStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__16);
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 203;
				Match(T__2);
				State = 204;
				stmtAssign();
				State = 205;
				Match(T__0);
				}
				break;
			}
			State = 209;
			expr(0);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 210;
				Match(T__0);
				State = 211;
				forDeclare();
				State = 212;
				Match(T__3);
				}
			}

			State = 216;
			Match(T__5);
			State = 217;
			((ForStmtContext)_localctx).lsfor = lstinstructions();
			State = 218;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForDeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forDeclare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterForDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitForDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForDeclareContext forDeclare() {
		ForDeclareContext _localctx = new ForDeclareContext(Context, State);
		EnterRule(_localctx, 26, RULE_forDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchInstructionContext : ParserRuleContext {
		public SwitchInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchInstruction; } }
	 
		public SwitchInstructionContext() { }
		public virtual void CopyFrom(SwitchInstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchStmtContext : SwitchInstructionContext {
		public LstinstructionsContext lsDefautl;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CasesContext cases() {
			return GetRuleContext<CasesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext lstinstructions() {
			return GetRuleContext<LstinstructionsContext>(0);
		}
		public SwitchStmtContext(SwitchInstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchInstructionContext switchInstruction() {
		SwitchInstructionContext _localctx = new SwitchInstructionContext(Context, State);
		EnterRule(_localctx, 28, RULE_switchInstruction);
		int _la;
		try {
			_localctx = new SwitchStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__17);
			State = 223;
			expr(0);
			State = 224;
			Match(T__5);
			State = 225;
			cases();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 226;
				Match(T__18);
				State = 227;
				Match(T__4);
				State = 228;
				((SwitchStmtContext)_localctx).lsDefautl = lstinstructions();
				}
			}

			State = 231;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext[] lstinstructions() {
			return GetRuleContexts<LstinstructionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LstinstructionsContext lstinstructions(int i) {
			return GetRuleContext<LstinstructionsContext>(i);
		}
		public CasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterCases(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitCases(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasesContext cases() {
		CasesContext _localctx = new CasesContext(Context, State);
		EnterRule(_localctx, 30, RULE_cases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 233;
				Match(T__19);
				State = 234;
				expr(0);
				State = 235;
				Match(T__4);
				State = 236;
				lstinstructions();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__19 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakInstructionContext : ParserRuleContext {
		public BreakInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakInstruction; } }
	 
		public BreakInstructionContext() { }
		public virtual void CopyFrom(BreakInstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BreakTransferContext : BreakInstructionContext {
		public BreakTransferContext(BreakInstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterBreakTransfer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitBreakTransfer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakTransfer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakInstructionContext breakInstruction() {
		BreakInstructionContext _localctx = new BreakInstructionContext(Context, State);
		EnterRule(_localctx, 32, RULE_breakInstruction);
		try {
			_localctx = new BreakTransferContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueInstructionContext : ParserRuleContext {
		public ContinueInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueInstruction; } }
	 
		public ContinueInstructionContext() { }
		public virtual void CopyFrom(ContinueInstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinueTransferContext : ContinueInstructionContext {
		public ContinueTransferContext(ContinueInstructionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterContinueTransfer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitContinueTransfer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueTransfer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueInstructionContext continueInstruction() {
		ContinueInstructionContext _localctx = new ContinueInstructionContext(Context, State);
		EnterRule(_localctx, 34, RULE_continueInstruction);
		try {
			_localctx = new ContinueTransferContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnFuncContext : ParserRuleContext {
		public ReturnFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnFunc; } }
	 
		public ReturnFuncContext() { }
		public virtual void CopyFrom(ReturnFuncContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnStmtContext : ReturnFuncContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ReturnFuncContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnFuncContext returnFunc() {
		ReturnFuncContext _localctx = new ReturnFuncContext(Context, State);
		EnterRule(_localctx, 36, RULE_returnFunc);
		try {
			_localctx = new ReturnStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(T__22);
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 247;
				expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterStmtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitStmtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			_localctx = new StmtExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 520093696L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationalOperatorContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalOperatorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(lexicalAnalyzerParser.NULL, 0); }
		public NullContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharacterContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(lexicalAnalyzerParser.CHARACTER, 0); }
		public CharacterContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeOfContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TypeOfContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterTypeOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitTypeOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConvertIntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConvertIntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterConvertInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitConvertInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicOperatorContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicOperatorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterLogicOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitLogicOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(lexicalAnalyzerParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(lexicalAnalyzerParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(lexicalAnalyzerParser.INT, 0); }
		public NumberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(lexicalAnalyzerParser.DECIMAL, 0); }
		public DecimalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateOperatorContext : ExprContext {
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateOperatorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterNegateOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitNegateOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConvertFloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConvertFloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterConvertFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitConvertFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssingVarContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(lexicalAnalyzerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssingVarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterAssingVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitAssingVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssingVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public FunctionCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(lexicalAnalyzerParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ModuleContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlexicalAnalyzerListener typedListener = listener as IlexicalAnalyzerListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlexicalAnalyzerVisitor<TResult> typedVisitor = visitor as IlexicalAnalyzerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 255;
				Match(T__28);
				State = 256;
				expr(26);
				}
				break;
			case 2:
				{
				_localctx = new NegateOperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				Match(T__33);
				State = 258;
				((NegateOperatorContext)_localctx).right = expr(21);
				}
				break;
			case 3:
				{
				_localctx = new ConvertIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259;
				Match(T__34);
				State = 260;
				Match(T__2);
				State = 261;
				expr(0);
				State = 262;
				Match(T__3);
				}
				break;
			case 4:
				{
				_localctx = new ConvertFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264;
				Match(T__35);
				State = 265;
				Match(T__2);
				State = 266;
				expr(0);
				State = 267;
				Match(T__3);
				}
				break;
			case 5:
				{
				_localctx = new TypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 269;
				Match(T__36);
				State = 270;
				Match(T__2);
				State = 271;
				expr(0);
				State = 272;
				Match(T__3);
				}
				break;
			case 6:
				{
				_localctx = new AssingVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 274;
				Match(ID);
				State = 275;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162667008L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 277;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 276;
					expr(0);
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				Match(BOOL);
				}
				break;
			case 8:
				{
				_localctx = new NullContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 280;
				Match(NULL);
				}
				break;
			case 9:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 281;
				Match(ID);
				}
				break;
			case 10:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 282;
				Match(INT);
				}
				break;
			case 11:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283;
				Match(DECIMAL);
				}
				break;
			case 12:
				{
				_localctx = new CharacterContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 284;
				Match(CHARACTER);
				}
				break;
			case 13:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285;
				Match(STRING);
				}
				break;
			case 14:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286;
				Match(T__2);
				State = 287;
				expr(0);
				State = 288;
				Match(T__3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 331;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 292;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 293;
						_la = TokenStream.LA(1);
						if ( !(_la==T__29 || _la==T__30) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 294;
						expr(25);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 295;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 296;
						_la = TokenStream.LA(1);
						if ( !(_la==T__28 || _la==T__31) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 297;
						expr(24);
						}
						break;
					case 3:
						{
						_localctx = new ModuleContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 298;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 299;
						Match(T__32);
						State = 300;
						expr(23);
						}
						break;
					case 4:
						{
						_localctx = new RelationalOperatorContext(new ExprContext(_parentctx, _parentState));
						((RelationalOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 301;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 302;
						((RelationalOperatorContext)_localctx).operador = Match(T__37);
						State = 303;
						((RelationalOperatorContext)_localctx).right = expr(18);
						}
						break;
					case 5:
						{
						_localctx = new RelationalOperatorContext(new ExprContext(_parentctx, _parentState));
						((RelationalOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 304;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 305;
						((RelationalOperatorContext)_localctx).operador = Match(T__38);
						State = 306;
						((RelationalOperatorContext)_localctx).right = expr(17);
						}
						break;
					case 6:
						{
						_localctx = new RelationalOperatorContext(new ExprContext(_parentctx, _parentState));
						((RelationalOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 307;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 308;
						((RelationalOperatorContext)_localctx).operador = Match(T__39);
						State = 309;
						((RelationalOperatorContext)_localctx).right = expr(16);
						}
						break;
					case 7:
						{
						_localctx = new RelationalOperatorContext(new ExprContext(_parentctx, _parentState));
						((RelationalOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 310;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 311;
						((RelationalOperatorContext)_localctx).operador = Match(T__40);
						State = 312;
						((RelationalOperatorContext)_localctx).right = expr(15);
						}
						break;
					case 8:
						{
						_localctx = new RelationalOperatorContext(new ExprContext(_parentctx, _parentState));
						((RelationalOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 313;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 314;
						((RelationalOperatorContext)_localctx).operador = Match(T__41);
						State = 315;
						((RelationalOperatorContext)_localctx).right = expr(14);
						}
						break;
					case 9:
						{
						_localctx = new RelationalOperatorContext(new ExprContext(_parentctx, _parentState));
						((RelationalOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 316;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 317;
						((RelationalOperatorContext)_localctx).operador = Match(T__42);
						State = 318;
						((RelationalOperatorContext)_localctx).right = expr(13);
						}
						break;
					case 10:
						{
						_localctx = new LogicOperatorContext(new ExprContext(_parentctx, _parentState));
						((LogicOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 319;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 320;
						((LogicOperatorContext)_localctx).operador = Match(T__43);
						State = 321;
						((LogicOperatorContext)_localctx).right = expr(12);
						}
						break;
					case 11:
						{
						_localctx = new LogicOperatorContext(new ExprContext(_parentctx, _parentState));
						((LogicOperatorContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 322;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 323;
						((LogicOperatorContext)_localctx).operador = Match(T__44);
						State = 324;
						((LogicOperatorContext)_localctx).right = expr(11);
						}
						break;
					case 12:
						{
						_localctx = new FunctionCallContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 325;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 327;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 326;
								func();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 329;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 24);
		case 1: return Precpred(Context, 23);
		case 2: return Precpred(Context, 22);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 25);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,59,337,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,1,1,1,5,1,49,8,1,10,1,12,1,52,9,1,1,2,1,2,3,2,56,8,2,1,2,1,2,
		3,2,60,8,2,1,2,1,2,3,2,64,8,2,1,2,1,2,3,2,68,8,2,1,2,1,2,3,2,72,8,2,1,
		2,1,2,3,2,76,8,2,1,2,1,2,3,2,80,8,2,1,2,1,2,3,2,84,8,2,1,2,1,2,3,2,88,
		8,2,1,2,1,2,3,2,92,8,2,1,2,1,2,3,2,96,8,2,1,2,1,2,3,2,100,8,2,3,2,102,
		8,2,1,3,1,3,1,3,1,3,3,3,108,8,3,1,3,1,3,1,3,3,3,113,8,3,1,3,1,3,1,3,1,
		3,1,4,1,4,1,4,1,4,1,4,5,4,124,8,4,10,4,12,4,127,9,4,1,5,1,5,3,5,131,8,
		5,1,5,1,5,1,6,1,6,1,6,5,6,138,8,6,10,6,12,6,141,9,6,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,5,7,151,8,7,10,7,12,7,154,9,7,1,7,3,7,157,8,7,1,8,1,8,1,
		8,1,8,1,8,3,8,164,8,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,4,10,174,8,10,
		11,10,12,10,175,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,5,11,191,8,11,10,11,12,11,194,9,11,1,11,1,11,1,11,1,11,1,11,
		3,11,201,8,11,1,12,1,12,1,12,1,12,1,12,3,12,208,8,12,1,12,1,12,1,12,1,
		12,1,12,3,12,215,8,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,3,14,230,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,4,15,239,
		8,15,11,15,12,15,240,1,16,1,16,1,17,1,17,1,18,1,18,3,18,249,8,18,1,19,
		1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,278,8,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,291,8,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,4,21,328,8,21,11,21,12,21,329,5,21,
		332,8,21,10,21,12,21,335,9,21,1,21,0,1,42,22,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,0,4,1,0,24,28,2,0,11,11,46,49,1,0,
		30,31,2,0,29,29,32,32,383,0,44,1,0,0,0,2,46,1,0,0,0,4,101,1,0,0,0,6,103,
		1,0,0,0,8,118,1,0,0,0,10,128,1,0,0,0,12,134,1,0,0,0,14,142,1,0,0,0,16,
		158,1,0,0,0,18,165,1,0,0,0,20,169,1,0,0,0,22,179,1,0,0,0,24,202,1,0,0,
		0,26,220,1,0,0,0,28,222,1,0,0,0,30,238,1,0,0,0,32,242,1,0,0,0,34,244,1,
		0,0,0,36,246,1,0,0,0,38,250,1,0,0,0,40,252,1,0,0,0,42,290,1,0,0,0,44,45,
		3,2,1,0,45,1,1,0,0,0,46,50,3,4,2,0,47,49,3,4,2,0,48,47,1,0,0,0,49,52,1,
		0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,3,1,0,0,0,52,50,1,0,0,0,53,55,3,38,
		19,0,54,56,5,1,0,0,55,54,1,0,0,0,55,56,1,0,0,0,56,102,1,0,0,0,57,59,3,
		16,8,0,58,60,5,1,0,0,59,58,1,0,0,0,59,60,1,0,0,0,60,102,1,0,0,0,61,63,
		3,18,9,0,62,64,5,1,0,0,63,62,1,0,0,0,63,64,1,0,0,0,64,102,1,0,0,0,65,67,
		3,6,3,0,66,68,5,1,0,0,67,66,1,0,0,0,67,68,1,0,0,0,68,102,1,0,0,0,69,71,
		3,20,10,0,70,72,5,1,0,0,71,70,1,0,0,0,71,72,1,0,0,0,72,102,1,0,0,0,73,
		75,3,22,11,0,74,76,5,1,0,0,75,74,1,0,0,0,75,76,1,0,0,0,76,102,1,0,0,0,
		77,79,3,14,7,0,78,80,5,1,0,0,79,78,1,0,0,0,79,80,1,0,0,0,80,102,1,0,0,
		0,81,83,3,24,12,0,82,84,5,1,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,102,1,0,
		0,0,85,87,3,28,14,0,86,88,5,1,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,102,1,
		0,0,0,89,91,3,32,16,0,90,92,5,1,0,0,91,90,1,0,0,0,91,92,1,0,0,0,92,102,
		1,0,0,0,93,95,3,34,17,0,94,96,5,1,0,0,95,94,1,0,0,0,95,96,1,0,0,0,96,102,
		1,0,0,0,97,99,3,36,18,0,98,100,5,1,0,0,99,98,1,0,0,0,99,100,1,0,0,0,100,
		102,1,0,0,0,101,53,1,0,0,0,101,57,1,0,0,0,101,61,1,0,0,0,101,65,1,0,0,
		0,101,69,1,0,0,0,101,73,1,0,0,0,101,77,1,0,0,0,101,81,1,0,0,0,101,85,1,
		0,0,0,101,89,1,0,0,0,101,93,1,0,0,0,101,97,1,0,0,0,102,5,1,0,0,0,103,104,
		5,2,0,0,104,105,5,55,0,0,105,107,5,3,0,0,106,108,3,8,4,0,107,106,1,0,0,
		0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,5,4,0,0,110,112,5,5,0,0,111,
		113,3,40,20,0,112,111,1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,115,
		5,6,0,0,115,116,3,2,1,0,116,117,5,7,0,0,117,7,1,0,0,0,118,119,5,55,0,0,
		119,125,3,40,20,0,120,121,5,8,0,0,121,122,5,55,0,0,122,124,3,40,20,0,123,
		120,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,9,1,0,
		0,0,127,125,1,0,0,0,128,130,5,3,0,0,129,131,3,12,6,0,130,129,1,0,0,0,130,
		131,1,0,0,0,131,132,1,0,0,0,132,133,5,4,0,0,133,11,1,0,0,0,134,139,3,42,
		21,0,135,136,5,8,0,0,136,138,3,42,21,0,137,135,1,0,0,0,138,141,1,0,0,0,
		139,137,1,0,0,0,139,140,1,0,0,0,140,13,1,0,0,0,141,139,1,0,0,0,142,143,
		5,9,0,0,143,144,5,55,0,0,144,145,5,10,0,0,145,156,3,40,20,0,146,147,5,
		11,0,0,147,152,5,6,0,0,148,151,3,42,21,0,149,151,5,8,0,0,150,148,1,0,0,
		0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
		155,1,0,0,0,154,152,1,0,0,0,155,157,5,7,0,0,156,146,1,0,0,0,156,157,1,
		0,0,0,157,15,1,0,0,0,158,159,5,9,0,0,159,160,5,55,0,0,160,163,3,40,20,
		0,161,162,5,11,0,0,162,164,3,42,21,0,163,161,1,0,0,0,163,164,1,0,0,0,164,
		17,1,0,0,0,165,166,5,55,0,0,166,167,5,12,0,0,167,168,3,42,21,0,168,19,
		1,0,0,0,169,170,5,13,0,0,170,173,5,3,0,0,171,174,3,42,21,0,172,174,5,8,
		0,0,173,171,1,0,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,
		176,1,0,0,0,176,177,1,0,0,0,177,178,5,4,0,0,178,21,1,0,0,0,179,180,5,14,
		0,0,180,181,3,42,21,0,181,182,5,6,0,0,182,183,3,2,1,0,183,192,5,7,0,0,
		184,185,5,15,0,0,185,186,3,42,21,0,186,187,5,6,0,0,187,188,3,2,1,0,188,
		189,5,7,0,0,189,191,1,0,0,0,190,184,1,0,0,0,191,194,1,0,0,0,192,190,1,
		0,0,0,192,193,1,0,0,0,193,200,1,0,0,0,194,192,1,0,0,0,195,196,5,16,0,0,
		196,197,5,6,0,0,197,198,3,2,1,0,198,199,5,7,0,0,199,201,1,0,0,0,200,195,
		1,0,0,0,200,201,1,0,0,0,201,23,1,0,0,0,202,207,5,17,0,0,203,204,5,3,0,
		0,204,205,3,18,9,0,205,206,5,1,0,0,206,208,1,0,0,0,207,203,1,0,0,0,207,
		208,1,0,0,0,208,209,1,0,0,0,209,214,3,42,21,0,210,211,5,1,0,0,211,212,
		3,26,13,0,212,213,5,4,0,0,213,215,1,0,0,0,214,210,1,0,0,0,214,215,1,0,
		0,0,215,216,1,0,0,0,216,217,5,6,0,0,217,218,3,2,1,0,218,219,5,7,0,0,219,
		25,1,0,0,0,220,221,3,42,21,0,221,27,1,0,0,0,222,223,5,18,0,0,223,224,3,
		42,21,0,224,225,5,6,0,0,225,229,3,30,15,0,226,227,5,19,0,0,227,228,5,5,
		0,0,228,230,3,2,1,0,229,226,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,
		232,5,7,0,0,232,29,1,0,0,0,233,234,5,20,0,0,234,235,3,42,21,0,235,236,
		5,5,0,0,236,237,3,2,1,0,237,239,1,0,0,0,238,233,1,0,0,0,239,240,1,0,0,
		0,240,238,1,0,0,0,240,241,1,0,0,0,241,31,1,0,0,0,242,243,5,21,0,0,243,
		33,1,0,0,0,244,245,5,22,0,0,245,35,1,0,0,0,246,248,5,23,0,0,247,249,3,
		42,21,0,248,247,1,0,0,0,248,249,1,0,0,0,249,37,1,0,0,0,250,251,3,42,21,
		0,251,39,1,0,0,0,252,253,7,0,0,0,253,41,1,0,0,0,254,255,6,21,-1,0,255,
		256,5,29,0,0,256,291,3,42,21,26,257,258,5,34,0,0,258,291,3,42,21,21,259,
		260,5,35,0,0,260,261,5,3,0,0,261,262,3,42,21,0,262,263,5,4,0,0,263,291,
		1,0,0,0,264,265,5,36,0,0,265,266,5,3,0,0,266,267,3,42,21,0,267,268,5,4,
		0,0,268,291,1,0,0,0,269,270,5,37,0,0,270,271,5,3,0,0,271,272,3,42,21,0,
		272,273,5,4,0,0,273,291,1,0,0,0,274,275,5,55,0,0,275,277,7,1,0,0,276,278,
		3,42,21,0,277,276,1,0,0,0,277,278,1,0,0,0,278,291,1,0,0,0,279,291,5,54,
		0,0,280,291,5,53,0,0,281,291,5,55,0,0,282,291,5,56,0,0,283,291,5,57,0,
		0,284,291,5,58,0,0,285,291,5,59,0,0,286,287,5,3,0,0,287,288,3,42,21,0,
		288,289,5,4,0,0,289,291,1,0,0,0,290,254,1,0,0,0,290,257,1,0,0,0,290,259,
		1,0,0,0,290,264,1,0,0,0,290,269,1,0,0,0,290,274,1,0,0,0,290,279,1,0,0,
		0,290,280,1,0,0,0,290,281,1,0,0,0,290,282,1,0,0,0,290,283,1,0,0,0,290,
		284,1,0,0,0,290,285,1,0,0,0,290,286,1,0,0,0,291,333,1,0,0,0,292,293,10,
		24,0,0,293,294,7,2,0,0,294,332,3,42,21,25,295,296,10,23,0,0,296,297,7,
		3,0,0,297,332,3,42,21,24,298,299,10,22,0,0,299,300,5,33,0,0,300,332,3,
		42,21,23,301,302,10,17,0,0,302,303,5,38,0,0,303,332,3,42,21,18,304,305,
		10,16,0,0,305,306,5,39,0,0,306,332,3,42,21,17,307,308,10,15,0,0,308,309,
		5,40,0,0,309,332,3,42,21,16,310,311,10,14,0,0,311,312,5,41,0,0,312,332,
		3,42,21,15,313,314,10,13,0,0,314,315,5,42,0,0,315,332,3,42,21,14,316,317,
		10,12,0,0,317,318,5,43,0,0,318,332,3,42,21,13,319,320,10,11,0,0,320,321,
		5,44,0,0,321,332,3,42,21,12,322,323,10,10,0,0,323,324,5,45,0,0,324,332,
		3,42,21,11,325,327,10,25,0,0,326,328,3,10,5,0,327,326,1,0,0,0,328,329,
		1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,292,1,0,0,
		0,331,295,1,0,0,0,331,298,1,0,0,0,331,301,1,0,0,0,331,304,1,0,0,0,331,
		307,1,0,0,0,331,310,1,0,0,0,331,313,1,0,0,0,331,316,1,0,0,0,331,319,1,
		0,0,0,331,322,1,0,0,0,331,325,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,
		333,334,1,0,0,0,334,43,1,0,0,0,335,333,1,0,0,0,37,50,55,59,63,67,71,75,
		79,83,87,91,95,99,101,107,112,125,130,139,150,152,156,163,173,175,192,
		200,207,214,229,240,248,277,290,329,331,333
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
