//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from lexicalAnalyzer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="lexicalAnalyzerParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IlexicalAnalyzerListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInit([NotNull] lexicalAnalyzerParser.InitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInit([NotNull] lexicalAnalyzerParser.InitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.lstinstructions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLstinstructions([NotNull] lexicalAnalyzerParser.LstinstructionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.lstinstructions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLstinstructions([NotNull] lexicalAnalyzerParser.LstinstructionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.instruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstruction([NotNull] lexicalAnalyzerParser.InstructionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.instruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstruction([NotNull] lexicalAnalyzerParser.InstructionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FuncStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.funcInstructions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncStmt([NotNull] lexicalAnalyzerParser.FuncStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FuncStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.funcInstructions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncStmt([NotNull] lexicalAnalyzerParser.FuncStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.funcParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncParams([NotNull] lexicalAnalyzerParser.FuncParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.funcParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncParams([NotNull] lexicalAnalyzerParser.FuncParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc([NotNull] lexicalAnalyzerParser.FuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc([NotNull] lexicalAnalyzerParser.FuncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.pars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPars([NotNull] lexicalAnalyzerParser.ParsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.pars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPars([NotNull] lexicalAnalyzerParser.ParsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtSlices</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtSlice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtSlices([NotNull] lexicalAnalyzerParser.StmtSlicesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtSlices</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtSlice"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtSlices([NotNull] lexicalAnalyzerParser.StmtSlicesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtVariables"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtVar([NotNull] lexicalAnalyzerParser.StmtVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtVariables"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtVar([NotNull] lexicalAnalyzerParser.StmtVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtVarAssign</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtVarAssign([NotNull] lexicalAnalyzerParser.StmtVarAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtVarAssign</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.stmtAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtVarAssign([NotNull] lexicalAnalyzerParser.StmtVarAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrintVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintVar([NotNull] lexicalAnalyzerParser.PrintVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrintVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintVar([NotNull] lexicalAnalyzerParser.PrintVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.instructionIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] lexicalAnalyzerParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.instructionIf"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] lexicalAnalyzerParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.forInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] lexicalAnalyzerParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.forInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] lexicalAnalyzerParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.forDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForDeclare([NotNull] lexicalAnalyzerParser.ForDeclareContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.forDeclare"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForDeclare([NotNull] lexicalAnalyzerParser.ForDeclareContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.switchInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStmt([NotNull] lexicalAnalyzerParser.SwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.switchInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStmt([NotNull] lexicalAnalyzerParser.SwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.cases"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCases([NotNull] lexicalAnalyzerParser.CasesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.cases"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCases([NotNull] lexicalAnalyzerParser.CasesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>breakTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.breakInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakTransfer([NotNull] lexicalAnalyzerParser.BreakTransferContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>breakTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.breakInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakTransfer([NotNull] lexicalAnalyzerParser.BreakTransferContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>continueTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.continueInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueTransfer([NotNull] lexicalAnalyzerParser.ContinueTransferContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>continueTransfer</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.continueInstruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueTransfer([NotNull] lexicalAnalyzerParser.ContinueTransferContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.returnFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] lexicalAnalyzerParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.returnFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] lexicalAnalyzerParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StmtExpr</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtExpr([NotNull] lexicalAnalyzerParser.StmtExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StmtExpr</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtExpr([NotNull] lexicalAnalyzerParser.StmtExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="lexicalAnalyzerParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] lexicalAnalyzerParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="lexicalAnalyzerParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] lexicalAnalyzerParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalOperator([NotNull] lexicalAnalyzerParser.RelationalOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalOperator([NotNull] lexicalAnalyzerParser.RelationalOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Null</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull([NotNull] lexicalAnalyzerParser.NullContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Null</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull([NotNull] lexicalAnalyzerParser.NullContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Character</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharacter([NotNull] lexicalAnalyzerParser.CharacterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Character</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharacter([NotNull] lexicalAnalyzerParser.CharacterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeOf</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeOf([NotNull] lexicalAnalyzerParser.TypeOfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeOf</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeOf([NotNull] lexicalAnalyzerParser.TypeOfContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDiv([NotNull] lexicalAnalyzerParser.MulDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDiv([NotNull] lexicalAnalyzerParser.MulDivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSub([NotNull] lexicalAnalyzerParser.AddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSub([NotNull] lexicalAnalyzerParser.AddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] lexicalAnalyzerParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] lexicalAnalyzerParser.ParensContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConvertInt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConvertInt([NotNull] lexicalAnalyzerParser.ConvertIntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConvertInt</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConvertInt([NotNull] lexicalAnalyzerParser.ConvertIntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicOperator([NotNull] lexicalAnalyzerParser.LogicOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicOperator([NotNull] lexicalAnalyzerParser.LogicOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] lexicalAnalyzerParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] lexicalAnalyzerParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] lexicalAnalyzerParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] lexicalAnalyzerParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] lexicalAnalyzerParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] lexicalAnalyzerParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Decimal</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimal([NotNull] lexicalAnalyzerParser.DecimalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Decimal</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimal([NotNull] lexicalAnalyzerParser.DecimalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegateOperator([NotNull] lexicalAnalyzerParser.NegateOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegateOperator([NotNull] lexicalAnalyzerParser.NegateOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConvertFloat</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConvertFloat([NotNull] lexicalAnalyzerParser.ConvertFloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConvertFloat</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConvertFloat([NotNull] lexicalAnalyzerParser.ConvertFloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssingVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssingVar([NotNull] lexicalAnalyzerParser.AssingVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssingVar</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssingVar([NotNull] lexicalAnalyzerParser.AssingVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegate([NotNull] lexicalAnalyzerParser.NegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegate([NotNull] lexicalAnalyzerParser.NegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCall</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] lexicalAnalyzerParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCall</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] lexicalAnalyzerParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean([NotNull] lexicalAnalyzerParser.BooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean([NotNull] lexicalAnalyzerParser.BooleanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Module</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModule([NotNull] lexicalAnalyzerParser.ModuleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Module</c>
	/// labeled alternative in <see cref="lexicalAnalyzerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModule([NotNull] lexicalAnalyzerParser.ModuleContext context);
}
